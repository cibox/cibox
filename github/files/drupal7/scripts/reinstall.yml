---
# This playbook should be executed using reinstall.sh script
# Developed for ansible version >= 1.7
- hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    drupal_user: admin
    drupal_pass: propeople
    installation_profile_name: pp
    mysql_user: drupal
    mysql_pass: drupal
    mysql_db: drupal
    sudo_user_name: 'jenkins'
    cache_folder: /var/www/cache
    backup_folder: /var/www/backup
    php_env_vars: 'APP_ENV=dev' # APP_ENV=dev - this varible will be set at PR_BUILDER from CI shell executor.
    site_url: 'http://sps.192.168.56.132.xip.io/'
    # This variable will be used for variable_get('environment'). Can be overridden by CI server.
    # development = 'default', demo = 'demo', staging = 'staging', production = 'production'.
    pp_environment: 'default'
    # This variable allows select type of installation. Can be overridden by CI server.
    # From installation profile = 'profile', from sql dump = 'sql'.
    workflow_type: 'sql'
    # This variable allows make backup before processing. Can be overridden by CI server.
    # true, false.
    make_backup: false
    # URL to the source database. Can be overridden by CI server.
    source_database: http://sps.wearepropeople.md/backup/latest.sql.gz
    uses_search_api: false

  tasks:

  - name: Getting timestamp
    shell: date +'%Y_%m_%d_%M_%S'
    register: backup_name_raw
    when: pp_environment == "staging" or make_backup

  - name: Getting name for backup
    set_fact: backup_name={{ backup_name_raw.stdout }}
    when: pp_environment == "staging" or make_backup

  - name: Creating backup folder
    sudo: yes
    file: path={{ backup_folder }} state=directory recurse=yes

  - name: Making backup
    sudo: yes
    shell: "{{ php_env_vars }} drush -y sql-dump --gzip --result-file={{ backup_folder }}/{{ backup_name }}.sql -l {{ site_url }}"
    when: pp_environment == "staging" or make_backup

  - name: Creating latest backup
    sudo: yes
    copy: src={{ backup_folder }}/{{ backup_name }}.sql.gz dest={{ backup_folder }}/latest.sql.gz force=yes mode=0644
    when: pp_environment == "staging" or make_backup

  - name: Check if latest backup exists
    stat: path={{ backup_folder }}/latest.sql.gz
    register: latest_backup_exists

  - name: Create latest backup from staging
    mysql_db: name=staging state=dump target={{ backup_folder }}/latest.sql.gz login_user={{ mysql_user }} login_password={{ mysql_pass }}
    when: latest_backup_exists.stat.exists == false and ansible_env.SUDO_USER == "{{ sudo_user_name }}"
  - name: Downloading latest backup
    get_url: url={{ source_database }} dest={{ backup_folder }}/latest_remote.sql.gz force=yes
    when: workflow_type == "sql" and ansible_env.SUDO_USER != "{{ sudo_user_name }}" and (pp_environment == "default" or pp_environment == "demo")
  - name: Droping drupal database
    mysql_db: name={{ mysql_db }} state=absent login_user={{ mysql_user }} login_password={{ mysql_pass }}
    when: pp_environment == "demo" or pp_environment == "default" or workflow_type == "profile"
  - name: Creating drupal database
    mysql_db: name={{ mysql_db }} state=present login_user={{ mysql_user }} login_password={{ mysql_pass }}
  - name: Importing from remote backup
    mysql_db: name={{ mysql_db }} state=import target={{ backup_folder }}/latest_remote.sql.gz login_user={{ mysql_user }} login_password={{ mysql_pass }}
    sudo: yes
    when: workflow_type == "sql" and ansible_env.SUDO_USER != "{{ sudo_user_name }}" and (pp_environment == "default" or pp_environment == "demo")
    register: database_imported
  - name: Copy local backup to build folder
    sudo: yes
    copy: src={{ backup_folder }}/latest.sql.gz dest=./latest.sql.gz force=yes mode=0644
    when: workflow_type == "sql" and ansible_env.SUDO_USER == "{{ sudo_user_name }}" and (pp_environment == "default" or pp_environment == "demo")
  - name: Importing from local backup
    mysql_db: name={{ mysql_db }} state=import target=./latest.sql.gz login_user={{ mysql_user }} login_password={{ mysql_pass }}
    sudo: yes
    when: workflow_type == "sql" and ansible_env.SUDO_USER == "{{ sudo_user_name }}" and (pp_environment == "default" or pp_environment == "demo")
  - name: Remove local backup from build folder
    sudo: yes
    file: name=./latest.sql.gz state=absent
    when: workflow_type == "sql" and ansible_env.SUDO_USER == "{{ sudo_user_name }}" and (pp_environment == "default" or pp_environment == "demo")
  - name: Creating cache folder
    sudo: yes
    file: path={{ cache_folder }} state=directory recurse=yes
  - name: Installing drupal
    sudo: yes
    shell: "{{ php_env_vars }} drush -y si {{ installation_profile_name }} install_configure_form.update_status_module='array(FALSE,FALSE)' --db-url=mysql://{{ mysql_user }}:{{ mysql_pass }}@127.0.0.1:/{{ mysql_db }} --account-name={{ drupal_user }} --account-pass={{ drupal_pass }} --uri={{ site_url }}"
    when: (pp_environment == "default" or pp_environment == "demo") and workflow_type == "profile"
  - name: Delete settings.php if it exists
    file: path=sites/default/settings.php state=absent
  - name: Creating settings.php from template
    sudo: yes
    template: src=sites/default/template.settings.php dest=sites/default/settings.php force=no mode=0644
    when: workflow_type == "sql"
  - name: Check if registry_rebuild is installed
    shell: "{{ php_env_vars }} drush | grep -c registry_rebuild"
    register: registry_rebuild_installed
    ignore_errors: True

  - name: Downloading registry_rebuild
    sudo: yes
    shell: "{{ php_env_vars }} drush -y dl registry_rebuild"
    when: workflow_type == "sql" and registry_rebuild_installed.stdout == "0"

  - name: Clear drush cache
    sudo: yes
    shell: "{{ php_env_vars }} drush cc drush"
    when: workflow_type == "sql" and registry_rebuild_installed.stdout == "0"

  - name: Rebuilding drupal registry
    sudo: yes
    shell: "{{ php_env_vars }} drush -y rr -l {{ site_url }}"
    when: workflow_type == "sql"

  - name: Updating database
    sudo: yes
    shell: "{{ php_env_vars }} drush -dvy updb -l {{ site_url }}"
    when: workflow_type == "sql"

  - name: Solr - clearing index
    sudo: yes
    shell: "{{ php_env_vars }} drush -y search-api-clear -l {{ site_url }}"
    when: uses_search_api == true

  - name: Solr - reindexing
    sudo: yes
    shell: "{{ php_env_vars }} drush -y search-api-index -l {{ site_url }}"
    when: uses_search_api == true

  - name: Enable stage_file_proxy if necessary
    sudo: yes
    shell: "{{ php_env_vars }} drush -y en stage_file_proxy"
    when: (pp_environment == "default" or pp_environment == "demo")
    ignore_errors: True

  handlers:
#    - name: import livedb
#      mysql_db: name=livedrupal state=import target=livedb.sql.gz
#      ignore_errors: yes